# Comments with #

# Type declarations (algebraic data types) with "type"
type Example {
  A, B, C,  # Comma-separated list of constructors (final comma is presently mandatory)
}
# Supports an arbitrary number of type parameters
type Option(a) {
  Some(a), None,
}

# All types must be finite, since they generate states, which must be finite

# A type declaration may not be recursive
# type Rec {
#   Rec
# }

# The first step to describing a model is creating one or more
# automata, to describe the topology of the model.

# Automata are declared using "automaton". These are non-deterministic
# finite automata, with or without final states.
automaton Trivial {

  # This declares the type of states in this automaton. Mandatory.
  state: Bool,

  # This declares which states the automaton may start in. Defaults to
  # all states.
  initial: { false, },

  # This declares which states are final, i.e., from which states we
  # may transition out of this automaton. Defaults to no states.
  final: { true, },

  # This declares the valid transitions.
  transitions: { false -> true, },
}

automaton ExampleAutomaton {
  # Supported types include tuples (using "(,,,)", with any number of
  # commas), integers (using ranges), fix length arrays (using
  # "T[n]"), user defined types (by name, applied to any needed
  # arguments)
  state: @(Example, 1..10, Option(Bool)[3]),

  # Unbound identifiers (e.g. a, b, c, x, and y below) are implicitly
  # universally quantified in "initial", "final", and
  # "transitions". Can specify multiple expressions by separating them
  # with commas
  initial: {
    @(A, 1, [Some(a), Some(b), Some(c),]),
    @(B, x, y),
  },

  final: {
    @(A, 1, x),
    @(B, 2, y),
  },

  transitions: {
    @(A, x, y) -> @(B, x, y),
    @(B, x, y) -> @(B, x+1, y),
    # ! name: @(C, x, y) -> @(C, x, y),
    @(C, x, y) -> @(C, x, y),
    # NOTE(Linnea,2022-05-16): labelling syntax deprecated, as transitions
    # can be constructed as union of individual named sets.
  },
  # Transitions may additionally be labelled. This has no semantic
  # effect, but may be used for querying the model later. Note that if
  # two transition expressions overlap (e.g., "fromTrue: true -> a"
  # and "toTrue: a -> true"), and both are labelled, then edges
  # introduced by both (e.g. "true -> true") have both labels.
}

# The next step is to compose the automata and declare what the
# various probabilities may depend on. Note that this does not assign
# probabilities, merely what they may be conditional on.

# NOTE(Linnea,2022-05-11): probability syntax deprecated
# # On the right-hand side of the "=" is the
# # composition. "name:Automaton" specifies that "Automaton" is a part
# # of the composition, and gives access to its state through
# # "name". "x(y)" specifies that each state of the automaton "x"
# # contains a copy of the automaton "y". Note that "y" has to have
# # final states, otherwise the outer automaton will never transition.
# model M = blub:Trivial(foo:Trivial) {

#   # This specifies that the probability of starting in a state "x" is
#   # dependent on both "x.outer" and "x.inner", i.e., it depends on all
#   # available state.
#   P(initial x) = P(initial x | x.outer, x.inner)
#   # Note however that P(initial x) cannot be greater than 0 unless
#   # both x.outer and x.inner are initial in their respective automaton

#   # This specifies that the output distribution of state "x" is only
#   # dependent on "x.outer", i.e., the number of output distributions
#   # we need to store is cut in half, since "Trivial" has two states.
#   P(output x) = P(output x | x.outer)

#   # It is also possible to specify multiple equations, each guarded by
#   # a condition. The first condition that holds true is the one that
#   # will be used.
#   P(a -> b) = {
#     | a.outer == b.outer => P(a -> b | a.outer, a.inner, b.inner)
#     | a.outer /= b.outer => P(_ | a.outer, b.outer) * P(initial b | b.inner)
#   }
#   # It is also possible to use "P(_ | ...)" as shorthand for the
#   # probability we're currently defining, i.e., above "P(_ | a.outer,
#   # b.outer)" is syntactic sugar for "P(a -> b | a.outer, b.outer)".
# }

automaton Nucleo3mer {
  state: Nucleotide[3],
  transitions: {
    [a, b, c, ] -> [b, c, d, ],
  },
}

# We can also declare values. Note that the type is mandatory
let otherwise: Bool = true

# If we add arguments we get a function. Note that the function should
# be total, it must terminate without exception on all inputs. Most of
# the time this shouldn't matter since most functions will be simple,
# but if we allow recursive functions we might run into trouble.
let add (a : 1..4, b : 1..4): 2..8 = a + b

let classify (x : 1..4): 1..2 =
  if x == 1 || x == 2 then 1 else 2

automaton Machine {
  state: 1..4,
  initial: { 1, },
  final: { 4, },
  transitions: {
    x -> x,
    x -> x+1,
    x -> x-1,
  },
}

# NOTE(Linnea,2022-05-11): probability syntax deprecated
# model M = outer:Nucleo3mer(inner:Machine) {
#   P(output x) = P(_ | x.outer, classify(x.inner))
#   P(initial x) = P(_ | x.outer, x.inner)
#   P(a -> b) = {
#     | a.outer == b.outer => P(_ | a.outer, a.inner, b.inner)
#     | otherwise => P(_ | a.outer, b.outer) * P(initial b | b.inner)
#   }
# }

# model M = outer:Nucleo3mer(inner:Machine*4) {
#   P(output x) = P(_ | x.outer, classify(x.inner))
#   P(initial x) = P(_ | x.outer, x.inner)
#   P(a -> b) = {
#     | a.outer == b.outer => P(_ | a.outer, a.inner, b.inner)
#     | otherwise => P(_ | a.outer, b.outer) * P(initial b | b.inner)
#   }
# }

# # TODO: function calls with parentheses (also for type-level stuff)
# # TODO: function declarations
# # TODO: probabilities conditional on expressions
# # TODO: fast-stepping inner automata
