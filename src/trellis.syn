language Trellis

include "trellis-lexer.mc"

------------
-- Tokens --
------------

-- Basic tokens
token LIdent {
  repr = LIdentRepr {},
  constructor = LIdentTok,
  fragment = LIdentTokenParser,
  ty = String,
}
token UIdent {
  repr = UIdentRepr {},
  constructor = UIdentTok,
  fragment = UIdentTokenParser,
  ty = String,
}
token Integer {
  repr = IntRepr {},
  constructor = IntTok,
  fragment = UIntTokenParser,
  ty = Int,
}

-- Wrapping tokens that just change the type in the AST
token UName {
  base = UIdent,
  wrap = nameNoSym,
  ty = Name,
}
token LName {
  base = LIdent,
  wrap = nameNoSym,
  ty = Name,
}

-- Token types only used through literals
token {fragment = OperatorTokenParser,}
token {fragment = CommaTokenParser,}
token {fragment = BracketTokenParser,}
token {fragment = SetTokenParser,}
token {fragment = TrellisDotsTokenParser,}

-- Whitespace and comments
token {fragment = TrellisLineCommentParser,}
token {fragment = WhitespaceParser,}

----------------------------
-- Top-level declarations --
----------------------------

start Top

type Top
type Decl
type ConstrDecl
type AutomatonProp
type Param

prod Top: Top = d:Decl*

-- Defines a constructor declaration production.
-- Examples: 'Foo (foo, bar)', 'A'
-- Counter example: 'A ()'
prod ConstrDecl: ConstrDecl =
  vName:UName ("(" param:TypeT ("," param:TypeT)* ")")?

-- Defines a type declaration production
-- Example: 'type MyType (foo, bar) {Foo (foo, bar), A, }'
prod TypeDecl : Decl =
  "type" name:UName ("(" param:LName ("," param:LName)* ")")?
  "{"
    (v:ConstrDecl ",")*
  "}"

-- Defines an automaton declaration
-- Example: 'automaton MyAutomaton {_, }'
prod AutomatonDecl: Decl =
  "automaton" name:UName
  "{"
    (prop:AutomatonProp ",")*
  "}"

-- Defines a parameter
-- Example: 'foo : _'
prod Param: Param = n:LIdent ":" ty:TypeT

-- Defines a function declaration.
-- Example: 'let myFun(foo:_) : _ = _'
prod FuncDecl: Decl =
  "let" fname:LIdent
  ("(" p:Param ("," p:Param)* ")")?
  (":" ty:TypeT)?
  "=" e:ExprT

----------------------------
-- Properties in automata --
----------------------------

-- Defines a state property.
prod StateProp: AutomatonProp =
  "state" ":" ty:TypeT

prod SetProp: AutomatonProp =
  (name:LIdent | initial:"initial") ":" s:SetT

----------
-- Sets --
----------

type SetT {
  grouping = "(" ")",
}

-- Defines an infix set union operator
infix left SetUnion: SetT = "\\u"

-- Defines an infix set intersection operator
infix left SetIntersection: SetT = "\\n"

-- Defines an infix set minus operator
infix left SetTMinus: SetT = "\\setminus"

-- Defines a named set.
-- Example: 'mySet'
prod NamedSet: SetT = name:LIdent

-- Defines a set literal. A later pass over the AST needs to check whether it is
-- a value set or a transition set, and give an error if mixed.
-- Example (value set): {1, a, }
-- Example (transition set): { false -> true,  }
prod SetLit: SetT =
  "{"
    (e:ExprT ("->" to:ExprT)? ",")*
  "}"

-- Defines a set builder. A later pass over the AST needs to check whether it is
-- a value set or a transition set builder.
-- Example (transition set builder): @{ x -> y | true }
prod SetBuilder: SetT =
  "@" "{"
     (p:PatT ("->" to:PatT)?)
     "|"
     (e:ExprT ",")*
   "}"


-- Projection
postfix SetProjection: SetT = "." lbl:LIdent

precedence {
  SetProjection;
  ~ SetUnion SetIntersection SetTMinus;
}

--------------
-- Patterns --
--------------

type PatT {
  grouping = "(" ")",
}

prod ConPatT: PatT = c:UIdent ("(" (p:PatT ",")+ ")")?

-- Defines a named pattern variable
-- Example: 'foo'
prod VarPatT: PatT = id:LIdent

-- Defines a wildcard pattern
prod WildPatT: PatT = "_"

-- Only allowed in an ArrayPat
postfix DotsPatT: PatT = "..."

prod ArrayPatT: PatT =
  "[" (p:PatT ",")* "]"

-- Defines a tuple pattern
-- Example '(foo, [a])'
prod TupPatT: PatT =
  "@" "(" p:PatT ("," p:PatT)+ ")"

-- Defines an integer pattern
prod IntPatT: PatT = i:Integer

-- Defines Boolean patterns
prod TruePatT: PatT = "true"
prod FalsePatT: PatT = "false"

-----------------------Integer
-- Normal data types --
-----------------------

type TypeT {
  grouping = "(" ")",
}

prod TypeVar: TypeT = n:LName

-- Defines an array type
postfix ArrayTypeT: TypeT = "[" count:ExprT "]"

-- Defines a concrete type
prod ConcreteTypeT: TypeT = n:UName ("(" a:TypeT ("," a:TypeT)* ")")?

-- Defines a tuple type
prod TupleTypeT: TypeT = "@" "(" t:TypeT ("," t:TypeT)+ ")"

-- Defines an integer range type
prod IntegerTypeT: TypeT =
  lb:Integer ((".." (ub:Integer | namedUb:LName)) | ("<=" v:LName "<=" (ub:Integer | namedUb:LName)))?

-- Defines a Boolean type
prod BoolTypeT: TypeT = bool:"Bool"

-- Defines an integer type
prod IntTypeT: TypeT = int:"Int"

-- Defines an automaton state type
prod AutomatonState: TypeT = "state" "(" automaton:LName ")"

-----------------
-- Expressions --
-----------------

type ExprT {
  grouping = "(" ")",
}

-- Operators
postfix Application: ExprT =
  "(" (a:ExprT ("," a:ExprT)*)? ")"
infix left Plus: ExprT = "+"
infix left Minus: ExprT = "-"
infix left MultipliedWith: ExprT = "*"
infix left DividedBy: ExprT = "/"
-- Either a nested access or a tuple access
postfix ProjectionAccess: ExprT = "." (label:LIdent | count:Integer)
infix Equal: ExprT = ("=" | "==")
infix NotEqual: ExprT = ("/=" | "!=")
infix LessThan: ExprT = "<"
infix GreaterThan: ExprT = ">"
infix LessThanOrEqual: ExprT = "<="
infix GreaterThanOrEqual: ExprT = ">="
infix left And: ExprT = "&&"
infix left Or: ExprT = "||"
postfix ArrayAccess: ExprT = "[" e:ExprT "]"
prefix If: ExprT =
  "if" c:ExprT "then" e:ExprT "else"
infix In: ExprT = "\\in"
infix Notin: ExprT = "\\notin"
infix left Union: ExprT = "\\u"
infix left Intersection: ExprT = "\\n"
infix left SetMinus: ExprT = "\\setminus"

prod Output: ExprT = "output"
prod True: ExprT = "true"
prod False: ExprT = "false"
prod Variable: ExprT = v:LName
prod Constructor: ExprT = c:UName
prod Integer: ExprT = i:Integer
-- May only be used inside a List
postfix SubSeq: ExprT = "..."
prod Array: ExprT = "[" (e:ExprT ",")* "]"
prod Tuple: ExprT =
  "@" "(" e:ExprT ("," e:ExprT)+ ")"

precedence {
  ProjectionAccess ArrayAccess Application;
  MultipliedWith DividedBy;
  Plus Minus;
  ~ Equal NotEqual LessThan GreaterThan LessThanOrEqual GreaterThanOrEqual;
  And Or;
  If;
} except {
  MultipliedWith ? DividedBy;
  And ? Or;
}

precedence {
  ~ ProjectionAccess ArrayAccess Application;
  ~ Union Intersection SetMinus;
  In Notin;
  ~ If And Or;
} except {
  ProjectionAccess ArrayAccess Application ? If And Or;
}

----------------------
-- MODEL DEFINITION --
----------------------

prod ModelDecl: Decl =
  "model" name:UName "=" mc:ModelComposition
  "{"
    (indecl:InModelDecl)+
  "}"

type ModelComposition {
  grouping = "(" ")",
}

prod ModelAtom: ModelComposition =
  name:LIdent ":" automaton:UIdent
postfix ModelNesting: ModelComposition =
  "(" mc:ModelComposition ")"
-- TODO(Linnea,2022-05-16): deprecated?
-- prod FastStepAutomatonPre: ModelComposition =
--   n:Integer "*"
-- postfix FastStepAutomatonPost: ModelComposition =
--   "*" n:Integer

type InModelDecl

prod InferredFunction: InModelDecl =
  "table" f:LIdent
  "("
    (p:TypeT ",")*
  ")" (":" ret:TypeT)?

-- The rhs using '=>' is only valid for transition probability
prod Prob: InModelDecl =
  "P" "("
    ( output:"output" "|" s:LIdent
    | initial:"initial" s:LIdent
    | transition:"transition" from:LIdent to:LIdent) ")"
    ( "=" e:ExprT
    | /- "="? -- TODO(Linnea,2022-05-16): ll1 conflict -/ "{"
      ("|" set:SetT "=>" e2:ExprT)+
      "}"
    )
