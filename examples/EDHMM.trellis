# DEFINES EXPLICIT DURATION HMM(EDHMM) - the model we are using now for the DNA basecaller

# TODO: define constants/is "automaton" class or template?

# DNA bases
type Nucleotide {
  A, C, G, T,  # Comma-separated list of constructors (final comma is presently mandatory)
}

# TODO: parameterize automata?

let merlength = 6

# automata representing DNA sequence with 5mer states
automaton DNA_mer {
 state: Nucleotide[merlength],
 intra_transitions: @ { [a, as..., ] -> [bs..., b, ] | as = bs, },
}

# durations of Kmer staying in the pore
automaton Duration16 {
 state: 1..16,
 # initial: all states #TODO: range choices
 # intra_transitions: { x -> y | y = x + 1 } \u { 16 -> 1 },
 initial: { 3, 4, },
 intra_transitions: @ { x -> y | true, },
 inter_transitions: @ { 1 -> x | 3 <= x && x <= 4, },
}

# TODO: define the structure of 'output'/measurement


model EDHMM = outer:DNA_5mer(inner:Duration16(foo:Innermost)) {
 table outputProb(Int, state(outer),): Probability

 table outerTrans(Bool, state(outer), state(outer),): Probability

 P(output | x) = O(output, x.outer) # measurement depends only on Kmer
 P(initial x) = InitOuter(x.outer) * InitInner(x.inner)
 P(transition x y) {
   | inner => InnerTrans(x.inner, y.inner)
   | outer => OuterTrans(x.outer, y.outer) * InitInner(y.inner)
 }

}
